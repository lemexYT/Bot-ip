import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import requests
from bs4 import BeautifulSoup
from urllib.parse import quote

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('7461396222:AAGWKUKQdFx4ztKhn0ukz8PqDb-OS9UxYbw')
IPLOGGER_URL = "https://iplogger.org/logger/"
USER_STATS = {}  # {user_id: {'links': [], 'stats': {}}}

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±—É—é —Å—Å—ã–ª–∫—É, –∏ —è —Å–æ–∑–¥–∞–º –∫–æ—Ä–æ—Ç–∫—É—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—É—é —Å—Å—ã–ª–∫—É. "
        "–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ –Ω–µ–π, —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /stats —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º."
    )

async def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏"""
    text = update.message.text
    user_id = update.effective_user.id
    
    if not (text.startswith('http://') or text.startswith('https://')):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (–Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://)")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è IPLogger
        encoded_url = quote(text, safe='')
        payload = {
            'url': encoded_url,
            'do': '1'
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ IPLogger
        session = requests.Session()
        response = session.post(IPLOGGER_URL, data=payload)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É
        short_link = soup.find('input', {'id': 'download_url'})['value']
        stats_link = soup.find('input', {'id': 'stat_url'})['value']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–µ
        if user_id not in USER_STATS:
            USER_STATS[user_id] = {'links': [], 'stats': {}}
        
        link_id = f"link_{len(USER_STATS[user_id]['links']) + 1}"
        USER_STATS[user_id]['links'].append({
            'id': link_id,
            'original': text,
            'short': short_link,
            'stats': stats_link
        })
        USER_STATS[user_id]['stats'][link_id] = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        keyboard = [
            [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", url=stats_link)],
            [InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=short_link)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n\n{short_link}\n\n"
            f"–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ –Ω–µ–π, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error creating short link: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_stats(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Å—ã–ª–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    if user_id not in USER_STATS or not USER_STATS[user_id]['links']:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.")
        return
    
    stats_text = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    for link in USER_STATS[user_id]['links']:
        stats_text += (
            f"üîó –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link['original']}\n"
            f"üìé –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞: {link['short']}\n"
            f"üëÄ –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {USER_STATS[user_id]['stats'].get(link['id'], 0)}\n"
            f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {link['stats']}\n\n"
        )
    
    await update.message.reply_text(stats_text)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", show_stats))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
